import { NextRequest, NextResponse } from "next/server";
import { GoogleGenerativeAI } from "@google/generative-ai";

// ‚úÖ Validaci√≥n de la API Key
const apiKey = process.env.GEMINI_API_KEY;
if (!apiKey) {
  throw new Error("La variable de entorno GEMINI_API_KEY no est√° definida");
}

// Inicializar el cliente de Gemini
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-1.5-flash",
  systemInstruction: `Act√∫a como un vendedor persuasivo que cambia las palabras por sin√≥nimos cada vez que se env√≠e el texto.
      Adem√°s, agrega emoticones en lugares naturales en el texto, como para expresar emociones o enfatizar ciertos puntos.
      Utiliza una variedad de emoticones de manera aleatoria para cada mensaje.`,
});

const generationConfig = {
  temperature: 0.1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

/**
 * API Route en Next.js para generar descripciones con Gemini
 */
export async function POST(req: NextRequest) {
  try {
    const { title, category } = await req.json();

    if (!title || !category) {
      return NextResponse.json({ error: "T√≠tulo y categor√≠a son requeridos" }, { status: 400 });
    }

    console.log("üì© Recibido en API:", { title, category });

    const chatSession = model.startChat({
      generationConfig,
      history: [],
    });

    const result = await chatSession.sendMessage(
      `Genera una descripci√≥n atractiva para un producto llamado "${title}" que pertenece a la categor√≠a "${category}". La descripci√≥n debe ser persuasiva y destacar sus caracter√≠sticas.`
    );

    const description = result.response.text();
    console.log("üì® Respuesta de Gemini:", description);

    return NextResponse.json({ description });
  } catch (error) {
    console.error("‚ùå Error interno del servidor:", error);
    return NextResponse.json({ error: "Error interno del servidor" }, { status: 500 });
  }
}
